# primary header
template_data:bytes=[0xF7, 0xFF, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff]
# this is the same as a binary file, to be replaced to a proper easy to read method.

# to implement template static data set e.g.
# 3 bit first of packet identification
#
# GENERAL SETTINGS
#

# This parameter indicated the data field size in bytes of a CCSDS
# packet, by changing this parameter the data will be segmented
# accordingly by the encoder.
data_field_size:int=1024

# insert sync pattern between packets. which marks the start of the
# CCSDS packet. If enabled the default sync pattern will be used.
# Alternatively refer to the optional "sync_pattern" parameter.
sync_pattern_enable:bool=false

# <optional> sync pattern is used if sync_pattern_enable is enabled.
# it will use default sync pattern "0x1ACFFC1D" is custom sync pattern
# is required uncomment the following argument.
#sync_pattern:int=0x1ACFFC1D

# By enabling this parameter the applications will perform validation
# on the packets for coherence and against the template packet.
validation_enable:bool=true

#
# TEMPLATE PACKET SETTINGS
#

# 3 bit first of packet identification, which indicate the version of
# the CCSDS packet.
ccsds_version_number:int=1

# 1 bit second of packet identification, boolean parameter indicating the
# CCSDS packet type.
ccsds_type:bool=true

# 11 bit last of packet identification
ccsds_APID:int=125

# 1 bit third of packet identification, indicating the presence of a secondary
# header within the data field
# NOTE: This field shall remain false, until Secondary header parsing is
# implemented in the encoder
ccsds_data_field_header_flag:bool=false


# true the packet is segmented
ccsds_segmented:bool=true

#
# TO BE IMPLEMENTED
#

# boolean to enable the CCSDS pack manager to read and implement the template
# for secondary header as well.
# Note: Updatable parameters are not settable. e.g. application data length size...
define_secondary_header:bool=false

# Type of registered secondary header.
secondary_header_type:string="PUS-C"
#secondary_header:bytes=[]

# alternatively secondary header options.

# Version: 3 bits, PUS standard version.
pus_version:int=1

# Service Type: 8 bits, type of service (e.g., 0x03 for time code).
pus_service_type:int=3

# Service Subtype: 8 bits, subtype of the service.
pus_service_sub_type:int=8

# Source ID: 8 bits, source identifier (e.g., satellite ID).
pus_source_id:int=3

# Time Code: 16 bits, value representing the time.
# Note this should be updatable
pus_time_code:int=23232